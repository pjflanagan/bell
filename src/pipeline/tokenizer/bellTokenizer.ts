import { Tokenizer } from "./Tokenizer";

export const bellTokenizer = new Tokenizer([
  { matcher: /[ \t]+/, type: null },
  { matcher: /\r?\n/, type: "line-break" },
  { matcher: /#(.*?)(?=\r?\n|$)/, type: "comment", valueExtractor: match => match.slice(2) },
  { matcher: /"[^"\r\n]+"/, type: "string-literal", valueExtractor: match => match.slice(1, -1) },
  { matcher: /'[^'\r\n]+'/, type: "string-literal", valueExtractor: match => match.slice(1, -1) },
  { matcher: /`[^`]+`/, type: "string-literal", valueExtractor: match => match.slice(1, -1) },
  { matcher: /-?[0-9]+\.?[0-9]*(?![a-zA-Z$_])/, type: "number-literal", valueExtractor: match => parseFloat(match) },
    { matcher: /{/, type: "{" },
  { matcher: /}/, type: "}" },
  { matcher: /\[/, type: "[" },
  { matcher: /\]/, type: "]" },
  { matcher: /\(/, type: "(" },
  { matcher: /\)/, type: ")" },
  { matcher: /\./, type: "." },

  { matcher: /\*/, type: "*" },
  { matcher: /===/, type: "===" },
  { matcher: /=/, type: "=" },
  { matcher: /!==/, type: "!==" },
  { matcher: /&&/, type: "&&" },
  { matcher: /!/, type: "!" },
  { matcher: /\|\|/, type: "||" },
  { matcher: /\+/, type: "+" },
  { matcher: /\-/, type: "-" },
  { matcher: />=/, type: ">=" },
  { matcher: />/, type: ">" },
  { matcher: /<=/, type: "<=" },
  { matcher: /</, type: "<" },
  { matcher: /true/, type: "true", valueExtractor: x => x },
  { matcher: /false/, type: "false", valueExtractor: x => x },

  { matcher: /import/, type: "import" },
  { matcher: /export/, type: "export" },
  { matcher: /write/, type: "write" },
  { matcher: /log/, type: "log" },
  { matcher: /request/, type: "request" },
  { matcher: /require/, type: "require" },
  { matcher: /wait/, type: "wait" },
  { matcher: /url/, type: "url" },
  { matcher: /scheme/, type: "scheme" },
  { matcher: /domain/, type: "domain" },
  { matcher: /port/, type: "port" },
  { matcher: /path/, type: "path" },
  { matcher: /param/, type: "param" },
  { matcher: /params/, type: "params" },
  { matcher: /fragment/, type: "fragment" },
  { matcher: /headers/, type: "headers" },
  { matcher: /body/, type: "body" },
  { matcher: /var/, type: "var" },
  { matcher: /expect/, type: "expect" },

  { matcher: /^([a-zA-Z][a-zA-Z0-9_]*) ?\= ?(.*)$/, type: 'identifier' },
]);
