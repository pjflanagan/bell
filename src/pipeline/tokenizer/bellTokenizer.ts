import { Tokenizer } from "./Tokenizer";
import { Matcher, TokenTypePartMap } from "./types";

const bellTokenTypePartMap: TokenTypePartMap = {
  // import: "command",
  // export: "command",
  // write: "command",
  // request: "command",
  // require: "command",
  log: "command",
  wait: "command",
  expect: "command",
  url: "requestPart",
  scheme: "requestPart",
  domain: "requestPart",
  port: "requestPart",
  path: "requestPart",
  param: "requestPart",
  params: "requestPart",
  fragment: "requestPart",
  headers: "requestPart",
  body: "requestPart",
  GET: "httpMethod",
  POST: "httpMethod",
  // PUT: "httpMethod",
  // DELETE: "httpMethod",
  // PATCH: "httpMethod",
  // HEAD: "httpMethod",
  // CONNECT: "httpMethod",
  // OPTIONS: "httpMethod",
  // TRACE: "httpMethod",
  // "{": "brackets",
  // "}": "brackets",
  "[": "brackets",
  "]": "brackets",
  // "(": "brackets",
  // ")": "brackets",
  "=": "equal",
  // ":": "equal",
  // ",": "deliminator",
  // "*": "operation",
  // "/": "operation",
  // "+": "operation",
  // "-": "operation",
  // "||": "operation",
  // "&&": "operation",
  // '!': 'operation',
  // "===": "comparator",
  // "!==": "comparator",
  // ">=": "comparator",
  // ">": "comparator",
  // "<=": "comparator",
  // "<": "comparator",
  identifier: "value",
  ".": "value",
  // true: "value",
  // false: "value",
  "string-literal": "value",
  "unquoted-string-literal": "value",
  "number-literal": "value",
  comment: "comment",
  "multi-line-comment": "comment",
  "line-break": "whitespace",
  "end-of-file": "whitespace"
}

const bellTokenMatcher: Matcher[] = [
  { matcher: /[ \t]+/, type: null },
  { matcher: /\r?\n/, type: "line-break" },
  { matcher: /###/, type: "multi-line-comment" },
  { matcher: /#(.*?)(?=\r?\n|$)/, type: "comment", valueExtractor: match => match.slice(2) },
  { matcher: /"[^"\r\n]+"/, type: "string-literal", valueExtractor: match => match.slice(1, -1) },
  { matcher: /'[^'\r\n]+'/, type: "string-literal", valueExtractor: match => match.slice(1, -1) },
  { matcher: /`[^`]+`/, type: "string-literal", valueExtractor: match => match.slice(1, -1) },
  { matcher: /-?[0-9]+\.?[0-9]*(?![a-zA-Z$_])/, type: "number-literal", valueExtractor: match => parseFloat(match) },

  // { matcher: /{/, type: "{" },
  // { matcher: /}/, type: "}" },
  // { matcher: /\[/, type: "[" },
  // { matcher: /\]/, type: "]" },
  // { matcher: /\(/, type: "(" },
  // { matcher: /\)/, type: ")" },
  // { matcher: /\./, type: "." },
  // { matcher: /,/, type: "," },
  // { matcher: /\*/, type: "*" },
  // { matcher: /\//, type: "/" },
  // { matcher: /===/, type: "===" },
  // { matcher: /=/, type: "=" },
  // { matcher: /:/, type: ":" },
  // { matcher: /!==/, type: "!==" },
  // { matcher: /&&/, type: "&&" },
  // { matcher: /!/, type: "!" },
  // { matcher: /\|\|/, type: "||" },
  // { matcher: /\+/, type: "+" },
  // { matcher: /\-/, type: "-" },
  // { matcher: />=/, type: ">=" },
  // { matcher: />/, type: ">" },
  // { matcher: /<=/, type: "<=" },
  // { matcher: /</, type: "<" },
  // { matcher: /true/, type: "true", valueExtractor: x => x },
  // { matcher: /false/, type: "false", valueExtractor: x => x },

  // { matcher: /import/, type: "import" },
  // { matcher: /export/, type: "export" },
  // { matcher: /write/, type: "write" },
  // { matcher: /request/, type: "request" },
  // { matcher: /require/, type: "require" },
  { matcher: /log/, type: "log" },
  { matcher: /wait/, type: "wait" },
  { matcher: /url/, type: "url" },
  { matcher: /scheme/, type: "scheme" },
  { matcher: /domain/, type: "domain" },
  { matcher: /port/, type: "port" },
  { matcher: /path/, type: "path" },
  { matcher: /param/, type: "param" },
  { matcher: /params/, type: "params" },
  { matcher: /fragment/, type: "fragment" },
  { matcher: /headers/, type: "headers" },
  { matcher: /body/, type: "body" },
  { matcher: /expect/, type: "expect" },

  { matcher: /GET/, type: "GET" },
  { matcher: /POST/, type: "POST" },
  // { matcher: /PUT/, type: "PUT" },
  // { matcher: /DELETE/, type: "DELETE" },
  // { matcher: /PATCH/, type: "PATCH" },
  // { matcher: /HEAD/, type: "HEAD" },
  // { matcher: /CONNECT/, type: "CONNECT" },
  // { matcher: /OPTIONS/, type: "OPTIONS" },
  // { matcher: /TRACE/, type: "TRACE" },

  { matcher: /\$[a-zA-Z_][a-zA-Z0-9_]*/, type: "identifier", valueExtractor: x => x },
  { matcher: /([^\s].+?)[\s]/, type: "unquoted-string-literal", valueExtractor: match => match.slice(0, -1) },
];

export const bellTokenizer = new Tokenizer(bellTokenMatcher, bellTokenTypePartMap);

